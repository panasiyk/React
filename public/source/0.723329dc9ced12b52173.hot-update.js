webpackHotUpdate(0,{

/***/ 359:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(18);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _TableComponent = __webpack_require__(360);\n\nvar _TableComponent2 = _interopRequireDefault(_TableComponent);\n\n__webpack_require__(33);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Table = function (_Component) {\n    _inherits(Table, _Component);\n\n    function Table(props) {\n        _classCallCheck(this, Table);\n\n        var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));\n\n        _this.arrayOfColorsForillumination = [];\n        _this.numberForIllumination = parseInt(_this.props.incomingData.numberForIllumination);\n\n        _this.state = {\n            rowIndexHover: -1,\n            flag: false\n        };\n        _this.createArrayOfColorsForillumination();\n\n        _this.onCellClick = _this.onCellClick.bind(_this);\n        _this.onMouseOverSumBlock = _this.onMouseOverSumBlock.bind(_this);\n        _this.onMouseOverCell = _this.onMouseOverCell.bind(_this);\n        _this.onMouseOutCell = _this.onMouseOutCell.bind(_this);\n        _this.getPercent = _this.getPercent.bind(_this);\n        return _this;\n    }\n\n    _createClass(Table, [{\n        key: 'createArrayOfColorsForillumination',\n        value: function createArrayOfColorsForillumination() {\n            for (var i = 0; i < this.props.incomingData.columnsCount; i++) {\n                this.arrayOfColorsForillumination[i] = [];\n                for (var j = 0; j < this.props.incomingData.rowsCount; j++) {\n                    this.arrayOfColorsForillumination[i][j] = '';\n                }\n            }\n        }\n    }, {\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nexProps) {\n            var row = [];\n            for (var i = 0; i < this.props.incomingData.rowsCount; i++) {\n                row[i] = '';\n            }\n            this.arrayOfColorsForillumination.push(row);\n        }\n    }, {\n        key: 'onCellClick',\n        value: function onCellClick(event, i, j) {\n            this.props.increaseAmount(i, j);\n            //this.onMouseOutCell(event);\n            this.onMouseOverCell(event, i, j);\n            this.props.changeAverageBlock();\n            this.props.changeSumBlock();\n        }\n    }, {\n        key: 'onMouseOverCell',\n        value: function onMouseOverCell(event, i, j) {\n            this.findNearestElementInArray(i, j);\n            this.fillingArrayOfColorsForillumination();\n            this.setState({ flag: true, rowIndexHover: -1 });\n        }\n    }, {\n        key: 'findRightNumberStart',\n        value: function findRightNumberStart(index) {\n            if (index - this.numberForIllumination < 0) {\n                return 0;\n            }\n            return index - this.numberForIllumination;\n        }\n    }, {\n        key: 'findRightNumberEnd',\n        value: function findRightNumberEnd(index) {\n            if (index + this.numberForIllumination > this.props.incomingData.rowsCount * this.props.incomingData.columnsCount) {\n                return this.props.incomingData.rowsCount * this.props.incomingData.columnsCount + 1;\n            }\n            return index + this.numberForIllumination + 1;\n        }\n    }, {\n        key: 'deleteFromArray',\n        value: function deleteFromArray(lenerArrayOfObjects, id) {\n            for (var i = 0; i < lenerArrayOfObjects.length; i++) {\n                if (lenerArrayOfObjects[i].id === id) {\n                    lenerArrayOfObjects.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }, {\n        key: 'findNearestElementInArray',\n        value: function findNearestElementInArray(i, j) {\n            console.time(\"you\");\n            this.arrayOfElementForIllumination = [];\n            var givenElement = this.props.initialDataForTable.arrayOfObjects[i][j];\n\n            var lenerArrayOfObjects = this.props.initialDataForTable.arrayOfObjects.reduce(function (sum, elem) {\n                return sum.concat(elem);\n            });\n            lenerArrayOfObjects = lenerArrayOfObjects.sort(function (prev, curr) {\n                return prev.amount - curr.amount;\n            });\n            var index = lenerArrayOfObjects.findIndex(function (item) {\n                return item.id === givenElement.id;\n            });\n            lenerArrayOfObjects = lenerArrayOfObjects.slice(this.findRightNumberStart(index), this.findRightNumberEnd(index));\n            this.deleteFromArray(lenerArrayOfObjects, givenElement.id);\n\n            while (this.arrayOfElementForIllumination.length !== this.numberForIllumination) {\n                var nearestElement = lenerArrayOfObjects.reduce(function (prev, curr) {\n                    return Math.abs(curr.amount - givenElement.amount) < Math.abs(prev.amount - givenElement.amount) ? curr : prev;\n                });\n                this.arrayOfElementForIllumination.push(nearestElement.id);\n                this.deleteFromArray(lenerArrayOfObjects, nearestElement.id);\n            }\n            console.timeEnd(\"you\");\n        }\n    }, {\n        key: 'fillingArrayOfColorsForillumination',\n        value: function fillingArrayOfColorsForillumination() {\n            var _this2 = this;\n\n            var _loop = function _loop(i) {\n                var _loop2 = function _loop2(j) {\n                    var isElinArray = _this2.arrayOfElementForIllumination.find(function (element) {\n                        if (_this2.props.initialDataForTable.arrayOfObjects[i][j].id !== element) return false;\n                        return element;\n                    });\n                    if (isElinArray !== undefined) {\n                        _this2.arrayOfColorsForillumination[i][j] = '#e50b2f';\n                    } else {\n                        _this2.arrayOfColorsForillumination[i][j] = '';\n                    }\n                };\n\n                for (var j = 0; j < _this2.props.initialDataForTable.arrayOfObjects[i].length; j++) {\n                    _loop2(j);\n                }\n            };\n\n            for (var i = 0; i < this.props.initialDataForTable.arrayOfObjects.length; i++) {\n                _loop(i);\n            }\n        }\n    }, {\n        key: 'onMouseOutCell',\n        value: function onMouseOutCell() {\n            this.takeBackColor();\n            this.setState({ flag: false, rowIndexHover: -1 });\n        }\n    }, {\n        key: 'takeBackColor',\n        value: function takeBackColor() {\n            for (var i = 0; i < this.props.initialDataForTable.arrayOfObjects.length; i++) {\n                for (var j = 0; j < this.props.initialDataForTable.arrayOfObjects[i].length; j++) {\n                    this.arrayOfColorsForillumination[i][j] = '';\n                }\n            }\n        }\n    }, {\n        key: 'fillingArrayOfColorsForPercentillumination',\n        value: function fillingArrayOfColorsForPercentillumination(rowIndexHover) {\n            for (var i = 0; i < this.props.initialDataForTable.arrayOfObjects.length; i++) {\n                if (i === rowIndexHover) {\n                    for (var j = 0; j < this.props.initialDataForTable.arrayOfObjects[i].length; j++) {\n                        this.arrayOfColorsForillumination[i][j] = ' linear-gradient(to right, #e50b2f ' + (this.props.initialDataForTable.arrayOfObjects[i][j].amount / this.props.initialDataForTable.arrayForSumBlock[i] * 100).toFixed(2) + '%, #AFCDE7 0%)';\n                    }\n                    break;\n                }\n            }\n        }\n    }, {\n        key: 'onMouseOverSumBlock',\n        value: function onMouseOverSumBlock(event, rowIndexHover) {\n            this.takeBackColor();\n            this.fillingArrayOfColorsForPercentillumination(rowIndexHover);\n            this.setState({ rowIndexHover: rowIndexHover });\n        }\n    }, {\n        key: 'getPercent',\n        value: function getPercent(i, j) {\n            return i === this.state.rowIndexHover ? (this.props.initialDataForTable.arrayOfObjects[i][j].amount / this.props.initialDataForTable.arrayForSumBlock[i] * 100).toFixed(2) + \"%\" : this.props.initialDataForTable.arrayOfObjects[i][j].amount;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            return _react2.default.createElement(_TableComponent2.default, { initialDataForTable: this.props.initialDataForTable,\n                illuminationTable: this.illuminationTable,\n                onCellClick: this.onCellClick,\n                onMouseOverCell: this.onMouseOverCell,\n                getPercent: this.getPercent,\n                onMouseOverSumBlock: this.onMouseOverSumBlock,\n                onMouseOutCell: this.onMouseOutCell,\n                arrayOfColorsForillumination: this.arrayOfColorsForillumination });\n        }\n    }]);\n\n    return Table;\n}(_react.Component);\n\nexports.default = Table;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/containers/Table.js\n// module id = 359\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/containers/Table.js?");

/***/ })

})